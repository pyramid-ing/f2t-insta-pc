name: Build and Release (Simple Version)

on:
  push:
    branches:
      - master
    tags:
      - 'v*.*.*'
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.12.1
          run_install: false

      - name: Get pnpm store directory
        shell: pwsh
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $env:GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        shell: pwsh
        run: |
          pnpm config set network-timeout 300000
          pnpm config set fetch-retries 5
          pnpm config set fetch-retry-factor 2
          pnpm config set fetch-retry-mintimeout 10000
          pnpm config set fetch-retry-maxtimeout 60000
          pnpm install --frozen-lockfile --prefer-offline

      - name: Generate Prisma Client
        run: pnpm prisma generate

      - name: Build initial database
        run: node scripts/build-initial-db.js

      - name: Get package version
        id: package-version
        shell: pwsh
        run: |
          $version = node -p "require('./package.json').version"
          echo "version=$version" >> $env:GITHUB_OUTPUT
          echo "tag=v$version" >> $env:GITHUB_OUTPUT

      - name: Check if version changed
        id: version-check
        if: github.ref == 'refs/heads/master' && !startsWith(github.ref, 'refs/tags/')
        shell: pwsh
        run: |
          $currentVersion = "${{ steps.package-version.outputs.version }}"
          $tagExists = git tag -l "v$currentVersion"
          if ($tagExists) {
            echo "version-changed=false" >> $env:GITHUB_OUTPUT
          } else {
            echo "version-changed=true" >> $env:GITHUB_OUTPUT
          }

      - name: Create and push tag
        if: steps.version-check.outputs.version-changed == 'true'
        shell: pwsh
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag "v${{ steps.package-version.outputs.version }}"
          git push origin "v${{ steps.package-version.outputs.version }}"

      - name: Build Windows App
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: pnpm build
        shell: pwsh

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: f2t-insta-dm-windows-v${{ steps.package-version.outputs.version }}
          path: dist/electron

      # GitHub 자동 릴리즈 노트 사용
      - name: Create GitHub Release with Auto-Generated Notes
        if: startsWith(github.ref, 'refs/tags/') || steps.version-check.outputs.version-changed == 'true'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.package-version.outputs.tag }}
          name: Release ${{ steps.package-version.outputs.tag }}
          generate_release_notes: true  # 자동 릴리즈 노트 생성
          files: dist/electron/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 